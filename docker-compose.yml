version: '3.8'

services:
  # PostgreSQL Database (Local) with pgvector
  postgres:
    image: ankane/pgvector:latest
    container_name: postgres_local
    environment:
      POSTGRES_USER: n8n_user
      POSTGRES_PASSWORD: UPDATE_ME
      POSTGRES_DB: n8n_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      internal:
        ipv4_address: 172.18.0.5
    labels:
      - "traefik.enable=false"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256m
    command: bash -c "apt-get update && apt-get install -y postgresql-contrib && postgres"
    restart: unless-stopped

  # n8n Workflow Automation (Configured for Local Postgres & Redis)
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    environment:
      # --- Local PostgreSQL Connection ---
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres_local
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=UPDATE_ME
      - DB_POSTGRESDB_SSL=false

      # --- Redis Connection ---
      - EXECUTIONS_MODE=regular
      - CACHE_MODE=redis
      - CACHE_REDIS_HOST=redis
      - CACHE_REDIS_PORT=6379
      # - CACHE_REDIS_PASSWORD=your_redis_password # Uncomment if Redis has a password
      - CACHE_REDIS_DB=0 # Explicitly setting n8n to use DB 0

      # --- n8n Specific Configuration ---
      - N8N_ENCRYPTION_KEY=UPDATE_ME
      - N8N_HOST=UPDATE_ME
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_EDITOR_BASE_URL=UPDATE_ME
      - N8N_LOG_LEVEL=info
      - N8N_COMMUNITY_PACKAGES_ENABLED=true
      - NODE_FUNCTION_ALLOW_EXTERNAL=* # Be cautious. List specific modules if possible.
      - N8N_PUSH_BACKEND=websocket
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_TEMPLATES_ENABLED=false
      - GENERIC_TIMEZONE=UPDATE_ME # Set to your timezone
    volumes:
      - n8n_data:/home/node/.n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`UPDATE_ME`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.routers.n8n.tls.options=default"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      internal:
        ipv4_address: 172.18.0.6
    depends_on:
      postgres_local:
        condition: service_started
      redis:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 6g
    restart: unless-stopped

  # OpenWebUI AI Interface
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    environment:
      # Connects to llama.cpp on host port 8080
      - OPENAI_API_BASE_URLS=http://llama-cpp:8080/v1
      - WEBUI_URL=UPDATE_ME 
      - DATA_DIR=/app/backend/data
      - NO_PROXY=0.0.0.0,localhost,127.0.0.1,host.docker.internal
      - UV_SYSTEM_PYTHON=true
      - WEBUI_NAME=PantaleoneAI
      # --- PostgreSQL Connection for pgvector ---
      - PGVECTOR_URL=postgresql://UPDATE_ME
      # --- Redis Connection for OpenWebUI ---
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # - REDIS_PASSWORD=your_redis_password # Uncomment and set if your Redis has a password
      - REDIS_DB=1 # Using DB 1 for OpenWebUI
    volumes:
      - openwebui_data:/app/backend/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui.rule=Host(`UPDATE_ME`)"
      - "traefik.http.routers.openwebui.entrypoints=websecure"
      - "traefik.http.routers.openwebui.tls=true"
      - "traefik.http.routers.openwebui.tls.certresolver=myresolver"
      - "traefik.http.routers.openwebui.tls.options=default"
      - "traefik.http.services.openwebui.loadbalancer.server.port=8080"
    networks:
      internal:
        ipv4_address: 172.18.0.7
    depends_on:
      - redis
      - llama-cpp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 3g
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.email=UPDATE_ME
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
      - --providers.file.filename=/etc/traefik/traefik_dynamic.yml
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
      - /home/ubuntu/ai/traefik_dynamic.yml:/etc/traefik/traefik_dynamic.yml:ro
    networks:
      internal:
        ipv4_address: 172.18.0.2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256m
    restart: unless-stopped

  # Redis Caching
  redis:
    image: redis:7.2-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      internal:
        ipv4_address: 172.18.0.3
    labels:
      - "traefik.enable=false"
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128m
    restart: unless-stopped

  # Crawl4AI Web Scraping
  crawl4ai:
    image: unclecode/crawl4ai:latest
    container_name: crawl4ai
    environment:
      - PLAYWRIGHT_BROWSERS_PATH=/ms-playwright
    volumes:
      - crawl4ai_data:/app/data
      - /dev/shm:/dev/shm
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.crawl4ai.rule=Host(`UPDATE_ME`)"
      - "traefik.http.routers.crawl4ai.entrypoints=websecure"
      - "traefik.http.routers.crawl4ai.tls=true"
      - "traefik.http.routers.crawl4ai.tls.certresolver=myresolver"
      - "traefik.http.services.crawl4ai.loadbalancer.server.port=8000"
    networks:
      internal:
        ipv4_address: 172.18.0.4
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 3g
    restart: unless-stopped

  # llama.cpp Service
  llama-cpp:
    image: llama-cpp:latest
    container_name: llama_cpp
    networks:
      internal:
        ipv4_address: 172.18.0.8
    volumes:
      - ./models:/models
    command: ./llama-server --model /models/model.gguf --port 8080
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 4g
    restart: unless-stopped

networks:
  internal:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16

volumes:
  postgres_data:
  n8n_data:
  openwebui_data:
  redis_data:
  letsencrypt:
  crawl4ai_data:
